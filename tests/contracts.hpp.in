#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

struct contracts {
   static std::vector<uint8_t> signup_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/signup/signup.wasm"); }
   static std::vector<char>    signup_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/signup/signup.abi"); }

      static std::vector<uint8_t> system_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system.nodeferred.172/eosio.system.wasm"); }
      static std::vector<char>    system_abi() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system.nodeferred.172/eosio.system.abi"); }
      static std::vector<uint8_t> token_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.token.172/eosio.token.wasm"); }
      static std::vector<char>    token_abi() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.token.172/eosio.token.abi"); }


   struct util {
   };
};
}} //ns eosio::testing
